#! /bin/sh -ueCx

hsh_bundle_usage() {
    cat <<EOF
usage: hsh bundle [options...]

Create a self extractible installer for the current configuration.

Available options:
    -f, --force  bundle a repository disregarding location modifications.
    -n, --name   name of the bundle, default: 'hsh_bundle.run'
EOF
}

hsh_bundle_cleanup() {
    if [ -e "$HSH_DIR/BUNDLE" ]
    then
        [ -e "$1" ] && rm "$1"
        [ -e "$HSH_DIR/BUNDLE_LIST" ] && "$HSH_DIR/BUNDLE_LIST"
        rm -rf "$HSH_DIR/BUNDLE"
        return 1
    fi
    return 0
}

hsh_bundle() {
    hb_name="hsh_bundle.run"
    while [ $# -ne 0 ]
    do
        case "$1" in
            -h|--help)
                hsh_bundle_usage
                return 0
                ;;
            -f|--force)
                hb_force=1
                ;;
            -n|--name)
                shift
                if [ $# -eq 0 ]
                then
                    hsh_err_die "missing argument for parameter '--name(-n)'"
                fi
                hb_name="${1}"
                ;;
            *)
                hsh_err_die "unknown option '$1' for command bundle"
                ;;
        esac
        shift
    done
    trap "hsh_bundle_cleanup \"$hb_name\"" EXIT HUP INT QUIT ABRT TERM
    mkdir "$HSH_DIR/BUNDLE"

    # bundle hsh
    mkdir -p "$HSH_DIR/BUNDLE/repos"
    mkdir -p "$HSH_DIR/BUNDLE/root"
    
    # check for local modifications
    if [ -z "${hb_force-}" ]
    then
        ls -1 "$HSH_DIR/repos" | while IFS= read -r hb_repo
        do
            hsh_git "$hb_repo" diff --quiet HEAD && continue
            hsh_die "repository '$hb_repo' has local modifications, use '--force' to bundle anyway"
        done
    fi
    ls -1 "$HSH_DIR/repos" | while IFS= read -r hb_repo
    do
        if [ -d "$HSH_DIR/repos/$hb_repo" ]
        then
            cp -rfP "$HSH_DIR/repos/$hb_repo" "$HSH_DIR/BUNDLE/repos" 
            if [ "$hb_repo" = "hsh" ]
            then
                git --work-tree "$HSH_DIR/BUNDLE" \
                    --git-dir "$HSH_DIR/BUNDLE/repos/$hb_repo" \
                    reset --hard HEAD
            else
                git --work-tree "$HSH_DIR/BUNDLE/root" \
                    --git-dir "$HSH_DIR/BUNDLE/repos/$hb_repo" \
                    reset --hard HEAD
            fi
        else
            hsh_die "repository '$hb_repo' does not exists"
        fi
    done

    hsh_git hsh show HEAD:bundle_header > "$hb_name"

    tar -C "$HSH_DIR/BUNDLE" -cz . >> "$hb_name"
    chmod u+x "$hb_name"

    rm -rf "$HSH_DIR/BUNDLE"
}

hsh_clone_cleanup() {
    if [ -e "$HSH_DIR/CLONE" ]
    then
        if [ -e "$HSH_DIR/repos/$1" ]
        then
            rm -rf "$HSH_DIR/repos/$1"
        fi
        rm -rf "$HSH_DIR/CLONE"
        return 1
    fi
    return 0
}

hsh_clone_usage() {
    cas << EOF
usage: hsh clone <url>

clone a repository into the current .hsh and check out its content.
EOF
}

hsh_clone() {
    while [ $# -ne 0 ]
    do
        case "$1" in
            -h|--help)
                hsh_clone_usage
                return 0
                ;;
            *)
                hcl_url="$1"
                shift
                break
                ;;
        esac
        shift
    done
    if [ -z "${hcl_url-}" ]
    then
        hsh_die "missing parameter for hsh clone command"
    fi
	# remove .git or /.git
    hcl_name="${hcl_url%.git}"
    hcl_name="${hcl_name%/}"
	# remove hsh_ prefix
	hcl_name="$(basename "$hcl_name")"
    hcl_name="${hcl_name#hsh_}"
    hcl_name="${hcl_name#hsh-}"

	[ -e "$HSH_DIR/repos/$hcl_name" ] && hsh_die "repository '$hcl_name' already exists" 
    trap "hsh_clone_cleanup \"$hcl_name\"" EXIT HUP INT QUIT ABRT TERM
    git clone --no-checkout --recurse-submodules "$hcl_url" "$HSH_DIR/CLONE"
    mv "$HSH_DIR/CLONE/.git" "$HSH_DIR/repos/$hcl_name"
    hsh_config_repo "$hcl_name"
    hsh_git "$hcl_name" checkout HEAD 
    rmdir "$HSH_DIR/CLONE"
}

hsh_config_usage() {
cat << EOF
usage: hsh config <repository> [git options...]

get or set local option for repository, '--local' option is implied.
EOF
}

hsh_config() {
    while [ $# -ne 0 ]
    do
        case "$1" in
            -h|--help)
                hsh_config_usage
                return 0
                ;;
            *)
                hco_repo="$1"
                shift
                break
                ;;
        esac
        shift
    done
    if [ -z "${hco_repo-}" ]; then
           hsh_config_usage
           exit 1
    fi
    hsh_git "${hco_repo}" config "$@"
}

hsh_config_repo() {
    git --git-dir "$HSH_DIR/repos/$1" config core.worktree "$HSH_ROOT"
    git --git-dir "$HSH_DIR/repos/$1" config core.sparseCheckout true
    git --git-dir "$HSH_DIR/repos/$1" config pull.rebase true
    git --git-dir "$HSH_DIR/repos/$1" config status.showUntrackedFiles no 
    cat <<- 'EOF' > "$HSH_DIR/repos/$1/info/sparse-checkout" 
		/*
		!README.md
		!.gitignore
		!.gitattributes
		!h.sh
		!LICENSE
		EOF
}

hsh_die() {
    echo "$@"
    exit 1
}

hsh_find_root() {
    hfr_start="${1}"
    hfr_root="$hfr_start"
    while [ "$hfr_root" != "/" ] \
        && [ ! -e "$hfr_root/.hsh" ]
    do
        hfr_root="$(dirname -- "$hfr_root")"
    done
    if [ "$hfr_root" = "/" ]
    then
        hsh_die "'$hfr_start' is no in a hsh root"
    fi
    echo "$hfr_root"
    return 0
}

hsh_git() {
    hg_repo="$1"
    shift
    if [ "$hg_repo" = "@all" ]
    then
        ls -1 "$HSH_DIR/repos" | while IFS= read -r hg_repo
        do
            git --git-dir "$HSH_DIR/repos/$hg_repo" "$@" || true
        done
    else
        git --git-dir "$HSH_DIR/repos/$hg_repo" "$@"
        hg_ret=$?
        return $hg_ret
    fi
}

hsh_init_cleanup() {
    if [ "$1" ]
    then
        if [ "$2" ]
        then
            rm -rf "$2"
        fi
        rm -rf "$1"
    fi
}

hsh_init_usage() {
    cat << EOF
usage: hsh init <name>

create and setup a new git repository.

EOF
}

hsh_init() {
    while [ $# -ne 0 ]
    do
        case "$1" in
            -h|--help)
                hsh_init_usage
                return 0
                ;;
            -*)
                hsh_die "unknown option '$1' for command init"     
                ;;
            *)
                hi_repo="$1"
                ;;
        esac
        shift
    done

    if [ -z "${hi_repo-}" ]
    then
        hsh_init_usage
    else
		hi_repo_dir="$HSH_DIR/repos/$hi_repo"
		hi_tmp_dir="$HSH_DIR/INIT"

        if [ -e "$hi_repo_dir" ]
        then
            hsh_die "repository '$hi_repo' already exists"   
        fi

        trap "hsh_init_cleanup \"$hi_tmp_dir\" \"$hi_repo\"" EXIT HUP INT QUIT ABRT TERM
        mkdir "$hi_tmp_dir"
        # TODO this should be a bare initialize
        #      and then setup HEAD and master branch config
        git init "$hi_tmp_dir"
        mv "$hi_tmp_dir/.git" "$hi_repo_dir"        
		hsh_config_repo "$hi_repo"
        rmdir "$hi_tmp_dir"
    fi
}

hsh_usage()  {
    cat << EOF
usage: hsh clone <url>
       hsh bundle 
       hsh init <name>
       hsh <repo> <git action> [<git params>]
EOF
}

hsh_version() {
    echo "v0.1"
}


########
# Main #
########

[ -e "" ] && 

if [ $# -eq 0 ]
then
    hsh_usage
fi

while [ $# -ne 0 ]
do
    case "$1" in
        -C)
            shift
            if [ $# -eq 0 ]
            then
                hsh_die "missing parameter for option '-C'"
            fi
            h_root="$1" 
            ;;
        -a|--all)
            h_repo="@all"
            ;;
        -*)
            hsh_die "unknown option '$1'"
            ;;
        *)
            h_action="$1"
            shift
            break
            ;;
    esac
    shift
done

if [ "$h_action" != "version" ] \
    && [ "$h_action" != "help" ]
then
    # global variable setup
    HSH_ROOT="$(hsh_find_root "${h_root:-$(pwd)}")" 
    HSH_DIR="$HSH_ROOT/.hsh"
fi

case "$h_action" in
    help)
        hsh_usage "$@"
        ;;
    version)
        hsh_version "$@" 
        ;;
    clone)
        hsh_clone "$@"
        ;;
    config)
        hsh_config "$@"
        ;;
    bundle)
        hsh_bundle "$@"
        ;;
    init)
        hsh_init "$@"
        ;;
    *)
        if [ -z "${h_repo-}" ]
        then
            if [ $# -eq 0 ]
            then
                hsh_usage
                exit 1
            fi
            h_repo="$1"
            shift
        fi
        hsh_git "$h_repo" "$h_action" "$@"
esac
